// <auto-generated />
using System;
using DatabaseContext.Entities.Core;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace DatabaseContext.Migrations
{
    [DbContext(typeof(EntitiesContext))]
    [Migration("20190525172609_InitialMigration")]
    partial class InitialMigration
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.0.0-preview5.19227.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("DatabaseContext.Entities.Address", b =>
                {
                    b.Property<Guid>("Key")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("City");

                    b.Property<string>("Country");

                    b.Property<string>("PostCode");

                    b.Property<string>("StreetName");

                    b.Property<string>("StreetNo");

                    b.HasKey("Key");

                    b.ToTable("Addresses");
                });

            modelBuilder.Entity("DatabaseContext.Entities.Client", b =>
                {
                    b.Property<Guid>("Key")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("FirstName");

                    b.Property<string>("LastName");

                    b.HasKey("Key");

                    b.ToTable("Clients");
                });

            modelBuilder.Entity("DatabaseContext.Entities.Department", b =>
                {
                    b.Property<Guid>("Key")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name");

                    b.Property<string>("Specialist");

                    b.HasKey("Key");

                    b.ToTable("Departments");
                });

            modelBuilder.Entity("DatabaseContext.Entities.Employee", b =>
                {
                    b.Property<Guid>("Key")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid?>("AddressKey");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(320);

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("Key");

                    b.HasIndex("AddressKey");

                    b.ToTable("Employees");
                });

            modelBuilder.Entity("DatabaseContext.Entities.Factor", b =>
                {
                    b.Property<Guid>("Key")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid?>("AddressKey");

                    b.Property<string>("Name");

                    b.HasKey("Key");

                    b.HasIndex("AddressKey");

                    b.ToTable("Factor");
                });

            modelBuilder.Entity("DatabaseContext.Entities.Item", b =>
                {
                    b.Property<Guid>("Key")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Color");

                    b.Property<double>("Height");

                    b.Property<string>("Name");

                    b.Property<Guid>("OrderKey");

                    b.Property<double>("width");

                    b.HasKey("Key");

                    b.HasIndex("OrderKey");

                    b.ToTable("Items");
                });

            modelBuilder.Entity("DatabaseContext.Entities.ItemToBeFactored", b =>
                {
                    b.Property<Guid>("Key")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("FactorKey");

                    b.Property<double>("Height");

                    b.Property<Guid>("ItemKey");

                    b.Property<string>("Notes");

                    b.Property<Guid>("OrderKey");

                    b.Property<double>("Width");

                    b.HasKey("Key");

                    b.HasIndex("FactorKey");

                    b.HasIndex("OrderKey");

                    b.ToTable("ItemToBeFactored");
                });

            modelBuilder.Entity("DatabaseContext.Entities.Journey", b =>
                {
                    b.Property<Guid>("Key")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("ArrivalDate");

                    b.Property<DateTime>("Date");

                    b.Property<DateTime>("DepartAddress");

                    b.HasKey("Key");

                    b.ToTable("Journey");
                });

            modelBuilder.Entity("DatabaseContext.Entities.JourneyOrder", b =>
                {
                    b.Property<Guid>("Key")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("JourneyKey");

                    b.Property<Guid>("OrderKey");

                    b.HasKey("Key");

                    b.HasIndex("JourneyKey");

                    b.HasIndex("OrderKey");

                    b.ToTable("JourneyOrder");
                });

            modelBuilder.Entity("DatabaseContext.Entities.Order", b =>
                {
                    b.Property<Guid>("Key")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid?>("AddressKey");

                    b.Property<Guid>("ClientKey");

                    b.Property<DateTime>("CreatedOn");

                    b.Property<int>("DeliveryType");

                    b.Property<Guid>("EmployeeKey");

                    b.Property<bool>("SoftDeleted");

                    b.HasKey("Key");

                    b.HasIndex("AddressKey");

                    b.HasIndex("ClientKey");

                    b.HasIndex("EmployeeKey");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("DatabaseContext.Entities.Student", b =>
                {
                    b.Property<Guid>("Key")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("DepartmentKey");

                    b.Property<string>("FirstName");

                    b.Property<string>("LastName");

                    b.HasKey("Key");

                    b.HasIndex("DepartmentKey");

                    b.ToTable("Students");
                });

            modelBuilder.Entity("DatabaseContext.Entities.Employee", b =>
                {
                    b.HasOne("DatabaseContext.Entities.Address", "Address")
                        .WithMany()
                        .HasForeignKey("AddressKey");
                });

            modelBuilder.Entity("DatabaseContext.Entities.Factor", b =>
                {
                    b.HasOne("DatabaseContext.Entities.Address", "Address")
                        .WithMany()
                        .HasForeignKey("AddressKey");
                });

            modelBuilder.Entity("DatabaseContext.Entities.Item", b =>
                {
                    b.HasOne("DatabaseContext.Entities.Order", "CustomerOrder")
                        .WithMany("Items")
                        .HasForeignKey("OrderKey")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DatabaseContext.Entities.ItemToBeFactored", b =>
                {
                    b.HasOne("DatabaseContext.Entities.Factor", "Factor")
                        .WithMany("FactoredItems")
                        .HasForeignKey("FactorKey")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DatabaseContext.Entities.Order", "Order")
                        .WithMany("ItemToBeFactored")
                        .HasForeignKey("OrderKey")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DatabaseContext.Entities.JourneyOrder", b =>
                {
                    b.HasOne("DatabaseContext.Entities.Journey", "Journey")
                        .WithMany()
                        .HasForeignKey("JourneyKey")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DatabaseContext.Entities.Order", "Order")
                        .WithMany("JourneyOrder")
                        .HasForeignKey("OrderKey")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DatabaseContext.Entities.Order", b =>
                {
                    b.HasOne("DatabaseContext.Entities.Address", "Address")
                        .WithMany("Orders")
                        .HasForeignKey("AddressKey");

                    b.HasOne("DatabaseContext.Entities.Client", "Client")
                        .WithMany("Orders")
                        .HasForeignKey("ClientKey")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DatabaseContext.Entities.Employee", "Employee")
                        .WithMany("Orders")
                        .HasForeignKey("EmployeeKey")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DatabaseContext.Entities.Student", b =>
                {
                    b.HasOne("DatabaseContext.Entities.Department", "DepartmentSection")
                        .WithMany("DepartmentSudent")
                        .HasForeignKey("DepartmentKey")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
